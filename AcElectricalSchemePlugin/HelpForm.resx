<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label7.Text" xml:space="preserve">
    <value>Команда предназначена для отрисовки однолинейной схемы.

Порядок действий:
1. Введите команду SLINE.
2. Выберите файл со входными данными.
3. Выберите точку отрисовки чертежа.

Примечание: пример исходного файла находится в папке Data</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>Команда предназначена для отрисовки схемы внешних подключений.

Порядок действий:
1. Введите команду SCHEME. 
2. В диалоговом окне выберите файл в формате *.xlsx с исходными данными.
3. Выберите точку начала отрисовки.

Примечание: пример исходного файла находится в папке Data</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>Команда предназначена для отрисовки схемы контуров.

Порядок действий:
1. Введите команду CONTOUR. 
2. В диалоговом окне выберите текстовый файл, полученный в ходе работы команды PARSECONTROL
3. В диалоговом окне выберите файл в формате *.xlsx ил *.xls с исходными данными для команды SCHEME.
4. В диалоговом окне выберите файл в формате *.xlsx ил *.xls с данными о межкафных соединениях.

Примечание: пример файла с данными о о межкафных соединениях находится в папке Data
</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>Команда предназначена для получения данных из схемы упралвения, пригодных для использования
в команде CONTOUR.

Порядок действий:
1. Откройте схему упралвения, данные с которой необходимо получить.
2. Настройте вид так, чтобы начиная с 7 страницы, весь чертёж попадал в экран, 
    за исключением спецификации вконце.
3. Введите команду PARSECONTROL.
4. Выберите левый верхний угол первого листа с DO (обычно это 7 или 8 страница).
5. Введите количество модулей DO 24V (у которых клеммник XT с клеммами FU).
6. В диалоговом окне выберите куда и с каким имененм сохранить результирующий файл.</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>Команда предназначена для получения данных о маркировке из электрических схем:

Порядок действий:
1. Откройте электрическую схему, данные с которой необходимо получить.
2. Настройте вид так, чтобы весь чертёж попадал в экран.
3. Введите команду MARK.
4. Сохраните получившийся файл.

Примечание: при работе скрипта маркировка и кабели, попавшие в результирующий 
                      файл окрашиваются в чёрный цвет. Если в чертеже остались неокрашенные 
                      элементы, то скорее всего они по тем или иным причинам не были распознаны 
                      программой.</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>Команда предназначена для отрисовки схемы упралвения.

Порядок действий:
1. В папке Data откройте шаблон-болванку "с ГУ" или "без ГУ".
2. Следуя указаниям, введите входные данные.
3. Выберите левый верхний угол первого листа уже имеющегося чертежа.</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>Команда предназначена для получения данных о весах клемм в эектричской схеме.

Порядок действий:
Команда выполняется до команды MARK
1. Введите команду TERMINALS.
2. Выделите необходимую часть чертежа и нажмите Enter.
3. Сохраните результирующий файл.</value>
  </data>
</root>